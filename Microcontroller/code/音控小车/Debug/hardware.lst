Sunplus u'nSP Assembler - Ver. 1.14.12
              Listing File Has Been Relocated
                            	//========================================================================================
                            	// Progarm: Standard function definition
                            	// Writen by: Andy
                            	//
                            	// Lastest modified date: 
                            	// 		2000/06/23: first version
                            	//		2000/07/15: modified
                            	//		2000/07/24: modified					for sacmv25.lib
                            	//		2001/10/03: Add more public about queue for sacmv25f.lib
                            	// 		2001/11/05: Independent Queue for A2000/S480/MS01 Manual Mode - sacmv25h.lib
                            	//		2001/11/06: Fix volume parameter problem - sacmv25i.lib
                            	//
                            	// For: sacmV25n.lib
                            	//
                            	// Note: 
                            	//  1. Don't change this file if possible.
                            	//  2. Update hardware.inc with hardware.asm synchorously
                            	//	3. Provide Open code for sacmVxx.lib
                            	//
                            	//========================================================================================
                            	
                            	.PUBLIC	F_SP_RampUpDAC1
                            	.PUBLIC	F_SP_RampDnDAC1
                            	.PUBLIC	F_SP_RampUpDAC2
                            	.PUBLIC	F_SP_RampDnDAC2
                            	.PUBLIC	_SP_RampUpDAC1 
                            	.PUBLIC	_SP_RampDnDAC1 
                            	.PUBLIC	_SP_RampUpDAC2 
                            	.PUBLIC	_SP_RampDnDAC2 
                            	
                            	.PUBLIC	_SP_InitQueue
                            	.PUBLIC	_SP_InitQueue_A2000
                            	.PUBLIC	_SP_InitQueue_S480
                            	.PUBLIC	_SP_InitQueue_S240
                            	.PUBLIC	_SP_InitQueue_MS01
                            	.PUBLIC	_SP_InitQueue_DVR
                            	
                            	.PUBLIC	F_SP_InitQueue
                            	.PUBLIC	F_SP_InitQueue_A2000
                            	.PUBLIC	F_SP_InitQueue_S480
                            	.PUBLIC	F_SP_InitQueue_S240
                            	.PUBLIC	F_SP_InitQueue_MS01
                            	.PUBLIC	F_SP_InitQueue_DVR
                            	
                            	.PUBLIC	F_SP_ReadQueue
                            	.PUBLIC F_SP_ReadQueue_A2000
                            	.PUBLIC F_SP_ReadQueue_S480
                            	.PUBLIC F_SP_ReadQueue_S240
                            	.PUBLIC F_SP_ReadQueue_MS01
                            	.PUBLIC F_SP_ReadQueue_DVR
                            	
                            	.PUBLIC	F_SP_ReadQueue_NIC			// Read Queue with no index change
                            	.PUBLIC	F_SP_ReadQueue_NIC_A2000
                            	.PUBLIC	F_SP_ReadQueue_NIC_S480
                            	.PUBLIC	F_SP_ReadQueue_NIC_S240
                            	.PUBLIC	F_SP_ReadQueue_NIC_MS01
                            	.PUBLIC	F_SP_ReadQueue_NIC_DVR
                            	
                            	.PUBLIC	F_SP_WriteQueue
                            	.PUBLIC F_SP_WriteQueue_A2000
                            	.PUBLIC F_SP_WriteQueue_S480
                            	.PUBLIC F_SP_WriteQueue_S240
                            	.PUBLIC F_SP_WriteQueue_MS01
                            	.PUBLIC F_SP_WriteQueue_DVR
                            	
                            	.PUBLIC F_SP_TestQueue
                            	.PUBLIC F_SP_TestQueue_A2000
                            	.PUBLIC F_SP_TestQueue_S480
                            	.PUBLIC F_SP_TestQueue_S240
                            	.PUBLIC F_SP_TestQueue_MS01
                            	.PUBLIC F_SP_TestQueue_DVR
                            	
                            	.PUBLIC _SP_Export  
                            	.PUBLIC	_SP_Import 
                            	.PUBLIC _SP_Init_IOB 
                            	.PUBLIC _SP_Init_IOA 
                            	
                            	.PUBLIC	_SP_GetResource	
                            	.PUBLIC F_SP_GetResource
                            	
                            	.PUBLIC F_SP_SACM_A2000_Init_
                            	.PUBLIC F_SP_SACM_S480_Init_
                            	.PUBLIC F_SP_SACM_S240_Init_
                            	
                            	.PUBLIC F_SP_SACM_MS01_Init_
                            	.PUBLIC F_SP_PlayMode0_
                            	.PUBLIC F_SP_PlayMode1_    
                            	.PUBLIC F_SP_PlayMode2_  
                            	.PUBLIC F_SP_PlayMode3_   
                            	
                            	.PUBLIC F_SP_SACM_DVR_Init_
                            	.PUBLIC F_SP_SACM_DVR_Rec_Init_
                            	.PUBLIC F_SP_SACM_DVR_Play_Init_
                            	
                            	.PUBLIC	R_InterruptStatus 
                            	.PUBLIC	F_RampUpDAC1 
                            	.PUBLIC	F_RampDnDAC1 
                            	.PUBLIC	F_RampUpDAC2 
                            	.PUBLIC	F_RampDnDAC2 
                            	.PUBLIC	_STD_RampUpDAC1 
                            	.PUBLIC	_STD_RampDnDAC1 
                            	.PUBLIC	_STD_RampUpDAC2 
                            	.PUBLIC	_STD_RampDnDAC2 
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Definitions for I/O Port
                            	//////////////////////////////////////////////////////////////////
                            	.DEFINE	P_IOA_Data   		0x7000         // Write Data into data register and read from IOA pad
                            	.DEFINE P_IOA_Buffer        0x7001         // Write Data into buffer register and read from buffer register
                            	.DEFINE P_IOA_Dir           0x7002         // Direction vector for IOA
                            	.DEFINE P_IOA_Attrib        0x7003         // Attribute vector for IOA
                            	.DEFINE P_IOA_Latch         0x7004         // Latch PortA data for key change wake-up
                            	
                            	.DEFINE P_IOB_Data         	0x7005         // Write Data into the data register and read from IOB pad
                            	.DEFINE P_IOB_Buffer        0x7006         // Write Data into buffer register and read from buffer register
                            	.DEFINE P_IOB_Dir           0x7007         // Direction vector for IOB
                            	.DEFINE P_IOB_Attrib        0x7008         // Attribute vector for IOB
                            	
                            	.DEFINE P_FeedBack          0x7009         // Clock form external R,C
                            	.DEFINE P_TimerA_Data       0x700A         // Data port for TimerA 
                            	.DEFINE P_TimerA_Ctrl       0x700B         // Control Port for TimerA
                            	.DEFINE P_TimerB_Data       0x700C         // Data port for TimerB
                            	.DEFINE P_TimerB_Ctrl       0x700D         // Control Port for TimerB
                            	.DEFINE P_TimeBase_Setup    0x700E         // TimerBase Freq. Set
                            	.DEFINE P_TimeBase_Clear	0x700F 		   // Reset Timerbase counter
                            	.DEFINE P_INT_Ctrl          0x7010         // Control port for interrupt source
                            	.DEFINE P_INT_Clear         0x7011         // Clear interrupt source
                            	.DEFINE P_Watchdog_Clear    0x7012         // Watchdog Reset
                            	.DEFINE P_SystemClock       0x7013         // Change system clock frequency(include go to standby mode)
                            	
                            	//... PA6442 New version MC52A (For EC-03)....
                            	.DEFINE P_ADC 	        	0x7014         	// Data Port for AD
                            	.DEFINE P_ADC_Ctrl          0x7015         	// Control Port for AD control
                            	.DEFINE P_ADC_Status        0x7015         	// AD Port Status
                            	.DEFINE P_DAC2              0x7016         	// Data Port for DAC2
                            	.DEFINE P_PWM               0x7016         	// Data Port for PWM
                            	.DEFINE P_DAC1	        	0x7017         	// Data Port for DAC1
                            	.DEFINE P_DAC_Ctrl			0x702A 			// Control Port for two DAC and audio output mode
                            	//............................................
                            	
                            	.DEFINE P_IR_Ctrl			0x7018 			// Control Port for IR
                            	.DEFINE P_LVD_Ctrl          0x7019         	// Control Port for LVD
                            	.DEFINE P_SIO_Data			0x701A 			// Data port for serial IO
                            	.DEFINE P_SIO_Addr_Low		0x701B 			// Address Port low
                            	.DEFINE P_SIO_Addr_Mid		0x701C 			// Address Port middle
                            	.DEFINE P_SIO_Addr_High	 	0x701D 			// Address Port high
                            	.DEFINE P_SIO_Ctrl			0x701E 			// Control Port
                            	.DEFINE P_SIO_Start			0x701F 			// Start port for serial interface
                            	.DEFINE P_SIO_Stop			0x7020 			// Stop port for serial interface
                            	
                            	.DEFINE P_UART_Command1		 0x7021 		// Command1 Port for UART
                            	.DEFINE P_UART_Command2		 0x7022 		// Command2 Port for UART
                            	.DEFINE P_UART_Data			 0x7023  		// Data Port for UART
                            	.DEFINE	P_UART_BaudScalarLow 0x7024 		// Set Baud Rate scalar low
                            	.DEFINE	P_UART_BaudScalarHigh 0x7025 		// Set Baud Rate scalar high
                            	
                            	
                            	//... Definitions for P_INT_Ctrl ..............
                            	.DEFINE C_IRQ6_TMB2             0x0001         	// Timer B IRQ6
                            	.DEFINE C_IRQ6_TMB1             0x0002         	// Timer A IRQ6
                            	.DEFINE C_IRQ5_2Hz              0x0004         	// 2Hz IRQ5
                            	.DEFINE C_IRQ5_4Hz              0x0008         	// 4Hz IRQ5
                            	.DEFINE C_IRQ4_1KHz             0x0010         	// 1024Hz IRQ4
                            	.DEFINE C_IRQ4_2KHz             0x0020         	// 2048Hz IRQ4
                            	.DEFINE C_IRQ4_4KHz             0x0040         	// 4096Hz IRQ4
                            	.DEFINE C_IRQ3_KEY              0x0080         	// Key Change IRQ3
                            	.DEFINE C_IRQ3_EXT1             0x0100         	// Ext1 IRQ3
                            	.DEFINE C_IRQ3_EXT2             0x0200         	// Ext2 IRQ3
                            	.DEFINE C_IRQ2_TMB              0x0400         	// Timer B IRQ2
                            	.DEFINE C_FIQ_TMB               0x0800         	// Timer B FIQ
                            	.DEFINE C_IRQ1_TMA              0x1000         	// Timer A IRQ1
                            	.DEFINE C_FIQ_TMA               0x2000         	// Timer A FIQ
                            	.DEFINE C_IRQ0_PWM              0x4000         	// PWM IRQ0
                            	.DEFINE C_FIQ_PWM               0x8000         	// PWM FIQ
                            	
                            	// Definitions for P_TimerA/B_Ctrl ............                               
                            	.DEFINE	C_Fosc_2				0x0000 			// 
                            	.DEFINE	C_Fosc_256		    	0x0001 			//
                            	.DEFINE	C_32768Hz				0x0002 			//
                            	.DEFINE	C_8192Hz				0x0003 			//
                            	.DEFINE	C_4096Hz				0x0004 			//
                            	.DEFINE	C_A1					0x0005 			//
                            	.DEFINE C_A0					0x0006 			//
                            	.DEFINE C_Ext1					0x0007 			//
                            	
                            	.DEFINE	C_2048Hz				0x0000 			//
                            	.DEFINE	C_1024Hz				0x0008 			//
                            	.DEFINE	C_256Hz					0x0010 			//
                            	.DEFINE	C_TMB1Hz				0x0018 			//
                            	.DEFINE	C_4Hz					0x0020 			//
                            	.DEFINE	C_2Hz					0x0028 			//
                            	.DEFINE	C_B1					0x0030 			//
                            	.DEFINE	C_Ext2					0x0038 			//
                            	
                            	.DEFINE	C_Off					0x0000 			//
                            	.DEFINE C_D1					0x0040 			//
                            	.DEFINE C_D2					0x0080 			//
                            	.DEFINE C_D3					0x00C0 			//
                            	.DEFINE C_D4					0x0100 			//
                            	.DEFINE C_D5					0x0140 			//
                            	.DEFINE C_D6					0x0180 			//
                            	.DEFINE C_D7					0x01C0 			//
                            	.DEFINE C_D8					0x0200 			//
                            	.DEFINE C_D9					0x0240 			//
                            	.DEFINE C_D10					0x0280 			//
                            	.DEFINE C_D11					0x02C0 			//
                            	.DEFINE C_D12					0x0300 			//
                            	.DEFINE C_D13					0x0340 			//
                            	.DEFINE C_D14					0x0380 			//
                            	.DEFINE C_TA_Div_2				0x03C0 			// Timer A
                            	.DEFINE C_TB_Div_2				0x03C0 			// Timer B
                            	
                            	//... Definition for P_SystemClock ............
                            	.DEFINE C_Fosc					0x0000 			// b3..b0
                            	.DEFINE C_Fosc_Div_2			0x0001 			//
                            	.DEFINE C_Fosc_Div_4			0x0002 			//
                            	.DEFINE C_Fosc_Div_8			0x0003 			// (default)
                            	.DEFINE C_Fosc_Div_16			0x0004 			//
                            	.DEFINE C_Fosc_Div_32			0x0005 			//
                            	.DEFINE C_Fosc_Div_64			0x0006 			//
                            	.DEFINE C_Sleep					0x0007 		 	//
                            	
                            	.DEFINE	C_32K_Work				0x0000 			// b4
                            	.DEFINE C_32K_Off				0x0000 			// 
                            	.DEFINE C_StrongMode			0x0000 			// b5
                            	.DEFINE C_AutoMode				0x0000 			//
                            	
                            	//... Define for P_AD_Ctrl ....................
                            	.DEFINE	C_AD					0x0001 			//
                            	.DEFINE C_DA					0x0000 			//
                            	.DEFINE C_MIC					0x0000 			//
                            	.DEFINE C_LINE					0x0002 			//
                            	
                            	//... Define for P_DA_Ctrl ....................
                            	.DEFINE C_PushPull				0x0000 			// b0, (default) 
                            	.DEFINE C_DoubleEnd				0x0001 			// b0
                            	.DEFINE	C_DAC_Mode				0x0000 			// b1, (default)
                            	.DEFINE C_PWM_Mode				0x0002 			// b1
                            	
                            	.DEFINE	C_D1_Direct				0x0000 			// DAC1 latch
                            	.DEFINE C_D1_LatchA				0x0008 			// 
                            	.DEFINE C_D1_LatchB				0x0010 			//
                            	.DEFINE C_D1_LatchAB			0x0018 			//
                            	
                            	.DEFINE	C_D2_Direct				0x0000 			// DAC2 latch
                            	.DEFINE C_D2_LatchA				0x0020 			// 
                            	.DEFINE C_D2_LatchB				0x0040 			//
                            	.DEFINE C_D2_LatchAB			0x00C0 			//
                            	
                            	//... Define for P_LVD_Ctrl ...................
                            	.DEFINE C_LVD24V				0x0000 			// LVD = 2.4V 
                            	.DEFINE C_LVD28V				0x0001 			// LVD = 2.8V
                            	.DEFINE C_LVD32V				0x0002 			// LVD = 3.2V
                            	.DEFINE C_LVD36V				0x0003 			// LVD = 3.6V
                            	
                            	
                            	
                            	/////////////////////////////////////////////////////////////////
                            	// Note: This register map to the P_INT_Ctrl(0x7010)
                            	// 	User's interrupt setting have to combine with this register 
                            	//	while co-work with SACM library.
                            	//
                            	//  See. following function for example:
                            	//	F_SP_SACM_A2000_Init_:
                            	//	F_SP_SACM_S480_Init_:
                            	//	F_SP_SACM_S240_Init_:
                            	//	F_SP_SACM_MS01_Init_:
                            	//	F_SP_SACM_DVR_Init_: 
                            	//////////////////////////////////////////////////
0000047E                    	.IRAM
0000047E 00 00              	.VAR	R_InterruptStatus = 0 					// 
                            	
                            	
                            	//////////////////////////////////////////////////
                            	
                            	.define C_RampDelayTime 16
                            	
                            	.define C_QueueSize 100		
                            			
0000047F 00 00              	.VAR 	R_Queue 
00000480 00 00 00 00        	.DW		C_QueueSize-1	DUP(0) 
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00      
000004E3 00 00              	.VAR	R_ReadIndex 
000004E4 00 00              	.VAR	R_WriteIndex 
                            	
0000C938                    	.CODE
                            	
                            					
                            	
                            	///////////////////////////////////////////
                            	// Function: Initial Queue
                            	// Destory: R1,R2
                            	///////////////////////////////////////////	
                            	_SP_InitQueue:	.PROC
                            	_SP_InitQueue_A2000:
                            	_SP_InitQueue_S480:
                            	_SP_InitQueue_S240:
                            	_SP_InitQueue_MS01:
                            	_SP_InitQueue_DVR:
                            	
                            	F_SP_InitQueue_A2000:
                            	F_SP_InitQueue_S480:
                            	F_SP_InitQueue_S240:
                            	F_SP_InitQueue_MS01:
                            	F_SP_InitQueue_DVR:
                            	F_SP_InitQueue:
0000C938 09 93 7F 04        			R1 = R_Queue
0000C93A 40 94              			R2 = 0 
                            	L_ClearQueueLoop?:		
0000C93B D1 D4              			[R1++] = R2
0000C93C 09 43 E3 04        			cmp	R1, R_Queue+C_QueueSize
0000C93E 44 4E              			jne	L_ClearQueueLoop?
                            				
0000C93F 40 92              			R1 = 0
0000C940 19 D3 E3 04        			[R_ReadIndex] = R1
0000C942 19 D3 E4 04        			[R_WriteIndex] = R1
                            					
0000C944 90 9A              			RETF
                            			.ENDP
                            			
                            	///////////////////////////////////////////
                            	// Function: Get a data form Queue
                            	// Output:  R1: Data
                            	//			R2: return value
                            	// Destory: R1,R2
                            	///////////////////////////////////////////	
                            	F_SP_ReadQueue_A2000:
                            	F_SP_ReadQueue_S480:
                            	F_SP_ReadQueue_S240:
                            	F_SP_ReadQueue_MS01:
                            	F_SP_ReadQueue_DVR:
                            	F_SP_ReadQueue:
0000C945 12 95 E3 04        			R2 = [R_ReadIndex]
0000C947 12 45 E4 04        			cmp R2,[R_WriteIndex]
0000C949 0D 5E              			je	L_RQ_QueueEmpty
                            	
0000C94A 0A 05 7F 04        			R2 += R_Queue				// get queue data address
0000C94C C2 92              			R1 = [R2]
                            			
0000C94D 12 95 E3 04        			R2 = [R_ReadIndex]
0000C94F 41 04              			R2 += 1
0000C950 0A 45 64 00        			cmp	R2, C_QueueSize
0000C952 01 4E              			jne	L_RQ_NotQueueBottom
0000C953 40 94              			R2 = 0
                            	L_RQ_NotQueueBottom:	
0000C954 1A D5 E3 04        			[R_ReadIndex] = R2		
                            			//r2 = 0x0000 						// get queue data
0000C956 90 9A              			retf 
                            	L_RQ_QueueEmpty:
                            			//r2 = 0x8000 						// queue empty
0000C957 90 9A              			retf 
                            	
                            	///////////////////////////////////////////
                            	// Function: Get a data from Queue but do 
                            	//			not change queue index
                            	// R1: output
                            	// Destory: R1,R2
                            	///////////////////////////////////////////
                            	F_SP_ReadQueue_NIC:
                            	F_SP_ReadQueue_NIC_A2000:
                            	F_SP_ReadQueue_NIC_S480:
                            	F_SP_ReadQueue_NIC_S240:
                            	F_SP_ReadQueue_NIC_MS01:
                            	F_SP_ReadQueue_NIC_DVR:
0000C958 12 95 E3 04        			R2 = [R_ReadIndex]
0000C95A 12 45 E4 04        			cmp R2,[R_WriteIndex]
0000C95C 03 5E              			je	L_RQ_QueueEmpty?
                            	
0000C95D 0A 05 7F 04        			R2 += R_Queue				// get queue data index
0000C95F C2 92              			R1 = [R2]
                            	L_RQ_QueueEmpty?:
0000C960 90 9A              			RETF
                            			
                            	///////////////////////////////////////////
                            	// Function: Put a data to Queue
                            	// R1: Input
                            	// Destory: R1,R2
                            	///////////////////////////////////////////	
                            	F_SP_WriteQueue_A2000:
                            	F_SP_WriteQueue_S480:
                            	F_SP_WriteQueue_S240:
                            	F_SP_WriteQueue_MS01:
                            	F_SP_WriteQueue_DVR:
                            	F_SP_WriteQueue:
0000C961 12 95 E4 04        			R2 = [R_WriteIndex] 			// put data to queue
0000C963 0A 05 7F 04        			R2 += R_Queue
0000C965 C2 D2              			[R2] = R1
                            	
0000C966 12 95 E4 04        			R2 = [R_WriteIndex]
0000C968 41 04              			R2 += 1
0000C969 0A 45 64 00        			cmp	R2, C_QueueSize
0000C96B 01 4E              			jne	L_WQ_NotQueueBottom
0000C96C 40 94              			R2 = 0
                            	L_WQ_NotQueueBottom:
0000C96D 1A D5 E4 04        			[R_WriteIndex] = R2
0000C96F 90 9A              			RETF
                            	
                            			
                            	///////////////////////////////////////////
                            	// Function: Test Queue Status
                            	// o/p: R1
                            	// Destory: R1
                            	///////////////////////////////////////////	
                            	F_SP_TestQueue_A2000:
                            	F_SP_TestQueue_S480:
                            	F_SP_TestQueue_S240:
                            	F_SP_TestQueue_MS01:
                            	F_SP_TestQueue_DVR:
                            	F_SP_TestQueue:
                            			//... Test Queue Empty ...
0000C970 11 93 E3 04        			R1 = [R_ReadIndex] 
0000C972 11 43 E4 04        			cmp R1,[R_WriteIndex] 
0000C974 12 5E              			je	L_TQ_QueueEmpty 
                            	
                            			//... Test Queue Full ...
0000C975 11 93 E3 04        			R1 = [R_ReadIndex] 				// For N Queue Full: 1.R=0 and W=N-1 2. R<>0 and W=R-1 
0000C977 05 4E              			jnz	L_TQ_JudgeCond2 
0000C978 11 93 E4 04        			R1 = [R_WriteIndex] 
0000C97A 09 43 63 00        			cmp	R1, C_QueueSize-1 			// Cond1
0000C97C 08 5E              			je	L_TQ_QueueFull 			
                            	L_TQ_JudgeCond2:		
0000C97D 11 93 E3 04        			R1 = [R_ReadIndex] 
0000C97F 41 22              			R1 -=1 
0000C980 11 43 E4 04        			cmp R1,[R_WriteIndex] 
0000C982 02 5E              			je	L_TQ_QueueFull 	
                            	
0000C983 40 92              			r1 = 0 							// not Full, not empty
0000C984 90 9A              			retf 
                            	L_TQ_QueueFull:
0000C985 41 92              			r1 = 1 							// full
0000C986 90 9A              			retf 
                            	L_TQ_QueueEmpty:
0000C987 42 92              			r1 = 2 							// empty
0000C988 90 9A              			retf 
                            	
                            	
                            	
                            	
                            	
                            	///////////////////////////////////////////////////////////////////////////////
                            	// Function: The partial code of hardware setting of SACM_A2000_Initial() 
                            	//			or F_SACM_A2000_Initial:
                            	// Note: The following functions are the partial code of original
                            	//			initial subroutine. (H/W setting part) 
                            	//
                            	//	Ex: F_SACM_A2000_Initial:
                            	//			...
                            	//			call F_SP_SACM_A2000_Init_	: S480/S240/MS01 is same
                            	//			...
                            	//			retf
                            	////////////////////////////////////////////////////////////////////////////////
                            	F_SP_SACM_A2000_Init_:	
0000C989 40 92              			R1=0x0000;                      // 24MHz, Fcpu=Fosc
0000C98A 19 D3 13 70        	        [P_SystemClock]=R1           	//  Frequency 20MHz
0000C98C 70 92              	        R1 = 0x0030                     // TimerA CKA=Fosc/2 CKB=1 Tout:off
0000C98D 19 D3 0B 70        	        [P_TimerA_Ctrl] = R1			// Initial Timer A
0000C98F 09 93 00 FD        	        R1 = 0xfd00                  	// 16K
0000C991 19 D3 0A 70        	        [P_TimerA_Data] = R1 
0000C993 09 93 A8 00        	        R1 = 0x00A8                     // Set the DAC Ctrl
0000C995 19 D3 2A 70        	        [P_DAC_Ctrl] = R1
0000C997 09 93 FF FF        	        R1 = 0xffff
                            	        
0000C999 19 D3 11 70        	        [P_INT_Clear] = R1          	// Clear interrupt occuiped events
0000C99B 40 92              	        R1 =0x0000						// 
                            	        
                            	        
0000C99C 11 93 7E 04        	        R1 = [R_InterruptStatus]		//
0000C99E 09 A3 00 20        	        R1 |= C_FIQ_TMA					// Enable Timer A FIQ
                            	        //R1 |= C_IRQ4_1KHz
0000C9A0 19 D3 7E 04        	        [R_InterruptStatus] = R1		//
0000C9A2 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
                            	
0000C9A4 90 9A              			RETF
                            	
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Function: The partial code of hardware setting of SACM_S480_Initial() 
                            	//			or F_SACM_S480_Initial:
                            	//////////////////////////////////////////////////////////////////
                            	F_SP_SACM_S480_Init_:
0000C9A5 40 92              	        R1 = 0x0000						// 24MHz Fosc
0000C9A6 19 D3 13 70        	        [P_SystemClock]=R1          	// Initial System Clock
0000C9A8 70 92              	        R1=0x0030                       // TimerA CKA=Fosc/2 CKB=1 Tout:off
0000C9A9 19 D3 0B 70        	        [P_TimerA_Ctrl]=R1				// Initial Timer A
                            	        //R1 = 0xfd00                  	// 16K
0000C9AB 09 93 ED FC        	        R1 = 0xfced						// 15.625K
0000C9AD 19 D3 0A 70        	        [P_TimerA_Data]=R1
0000C9AF 09 93 A8 00        	        R1 = 0x00A8						// 
0000C9B1 19 D3 2A 70        	        [P_DAC_Ctrl] = R1				//
                            	        
0000C9B3 09 93 FF FF        	        R1 = 0xffff
0000C9B5 19 D3 11 70        	        [P_INT_Clear] = R1          	// Clear interrupt occuiped events
0000C9B7 11 93 7E 04        	        R1 = [R_InterruptStatus]		//
0000C9B9 09 A3 00 20        	        R1 |= C_FIQ_TMA					// Enable Timer A FIQ
                            	        //R1 |= C_IRQ4_1KHz				// Enable 1KHz IRQ4 for S480 decoder
0000C9BB 19 D3 7E 04        	        [R_InterruptStatus] = R1		//
0000C9BD 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
                            	        
0000C9BF 90 9A              	        RETF
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Function: The partial code of hardware setting of SACM_S240_Initial() 
                            	//			or F_SACM_S240_Initial:
                            	//////////////////////////////////////////////////////////////////
                            	F_SP_SACM_S240_Init_:	
0000C9C0 60 92              			R1=0x0020;	
0000C9C1 19 D3 13 70        			[P_SystemClock]=R1
0000C9C3 09 93 A8 00        			R1 = 0x00A8;					// 
0000C9C5 19 D3 2A 70        			[P_DAC_Ctrl]= R1
0000C9C7 70 92              			R1 = 0x0030;               	// TimerA CKA=Fosc/2 CKB=1 Tout:off
0000C9C8 19 D3 0B 70        	        [P_TimerA_Ctrl] = R1;
0000C9CA 09 93 00 FE        			R1 = 0xfe00;                    // 24K
0000C9CC 19 D3 0A 70        	    	[P_TimerA_Data] = R1;		
0000C9CE 09 93 FF FF        	        R1 = 0xffff
0000C9D0 19 D3 11 70        	        [P_INT_Clear] = R1          	// Clear interrupt occuiped events
0000C9D2 11 93 7E 04        	        R1 = [R_InterruptStatus]		//
0000C9D4 09 A3 00 20        	        R1 |= C_FIQ_TMA					// Enable Timer A FIQ
0000C9D6 19 D3 7E 04        	        [R_InterruptStatus] = R1		//
0000C9D8 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
0000C9DA 90 9A              	        RETF
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Function: The partial code of hardware setting of SACM_MS01_Initial() 
                            	//			or F_SACM_MS01_Initial:
                            	//
                            	//	Ex: F_SACM_MS01_Initial:
                            	//			...
                            	//			call F_SP_SACM_MS01_Init_
                            	//			call F_SP_Play_Mode0/1/2/3	->0,1,2,3 depending on the para1
                            	//			...
                            	//			retf
                            	//////////////////////////////////////////////////////////////////
                            	F_SP_SACM_MS01_Init_:	
0000C9DB 40 92              			R1 = 0x0000;                    // 24MHz, Fcpu=Fosc
0000C9DC 19 D3 13 70        	        [P_SystemClock] = R1;        	// Initial System Clock
0000C9DE 70 92              	        R1 = 0x0030;                    // TimerA CKA=Fosc/2 CKB=1 Tout:off
0000C9DF 19 D3 0B 70        	        [P_TimerA_Ctrl] = R1			// Initial Timer A
                            	        
                            	        //R1 = 0x0003						// 8K
0000C9E1 40 92              	        R1 = 0x0000						// Fosc/2
0000C9E2 19 D3 0D 70        	        [P_TimerB_Ctrl] = R1;			// Initial Timer B -> 8192	
                            	        
                            	        //R1 = 0xFFFF        
0000C9E4 09 93 00 FA        	        R1 = 0xFA00					// Any time for ADPCM channel 0,1
0000C9E6 19 D3 0C 70        	        [P_TimerB_Data] = R1			// 8K sample rate
                            	        
0000C9E8 09 93 FF FF        			R1 = 0xffff
0000C9EA 19 D3 11 70        	        [P_INT_Clear] = R1          	// Clear interrupt occuiped events
0000C9EC 90 9A              	        RETF
                            	
                            	//........................................
                            	F_SP_PlayMode0_:						// with F_SP_SACM_MS01_Initial
0000C9ED 46 92              			R1 = 0x0006
0000C9EE 19 D3 2A 70        	        [P_DAC_Ctrl] = R1
0000C9F0 09 93 00 FE        	        R1 = 0xFE00
0000C9F2 19 D3 0A 70        	        [P_TimerA_Data] = R1 			//
0000C9F4 11 93 7E 04        	        R1 = [R_InterruptStatus] 		//
0000C9F6 09 A3 10 84        	        R1 |= C_FIQ_PWM+C_IRQ2_TMB+C_IRQ4_1KHz
0000C9F8 19 D3 7E 04        	        [R_InterruptStatus] = R1 		//
0000C9FA 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
0000C9FC 90 9A              	        RETF
                            	
                            	F_SP_PlayMode1_:						// with F_SP_SACM_MS01_Initial
0000C9FD 09 93 A8 00        			R1 = 0x00A8
0000C9FF 19 D3 2A 70        	        [P_DAC_Ctrl] = R1
0000CA01 09 93 00 FE        	        R1 = 0xFE00
0000CA03 19 D3 0A 70        	        [P_TimerA_Data] = R1 			//
0000CA05 11 93 7E 04        	        R1 = [R_InterruptStatus] 		//
0000CA07 09 A3 10 24        	        R1 |= C_FIQ_TMA+C_IRQ2_TMB+C_IRQ4_1KHz
0000CA09 19 D3 7E 04        	        [R_InterruptStatus] = R1 		//
0000CA0B 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
0000CA0D 90 9A              	        RETF
                            	
                            	
                            	F_SP_PlayMode2_:	 						// with F_SP_SACM_MS01_Initial
0000CA0E 09 93 A8 00        			R1 = 0x00A8
0000CA10 19 D3 2A 70        	        [P_DAC_Ctrl] = R1
0000CA12 09 93 9A FD        	        R1 = 0xFD9A
0000CA14 19 D3 0A 70        	        [P_TimerA_Data] = R1 				//
0000CA16 11 93 7E 04        	        R1 = [R_InterruptStatus] 			//
0000CA18 09 A3 10 24        	        R1 |= C_FIQ_TMA+C_IRQ2_TMB+C_IRQ4_1KHz
0000CA1A 19 D3 7E 04        	        [R_InterruptStatus] = R1 			//
0000CA1C 19 D3 10 70        	        [P_INT_Ctrl] = R1					//
0000CA1E 90 9A              	        RETF
                            	
                            	      
                            	F_SP_PlayMode3_:								// with F_SP_SACM_MS01_Initial
0000CA1F 09 93 A8 00        			R1 = 0x00A8
0000CA21 19 D3 2A 70        	        [P_DAC_Ctrl] = R1
0000CA23 09 93 00 FD        	        R1 = 0xFD00
0000CA25 19 D3 0A 70        	        [P_TimerA_Data] = R1 					//
0000CA27 11 93 7E 04        	        R1 = [R_InterruptStatus] 				//
0000CA29 09 A3 10 24        	        R1 |= C_FIQ_TMA+C_IRQ2_TMB+C_IRQ4_1KHz
0000CA2B 19 D3 7E 04        		    [R_InterruptStatus] = R1 				//
0000CA2D 19 D3 10 70        	        [P_INT_Ctrl] = R1						//
0000CA2F 90 9A              	        RETF
                            	        
                            	///////////////////////////////////////////////////////////////////////////////
                            	// Function: The partial code of hardware setting of SACM_MS01_Initial() 
                            	//			or F_SACM_MS01_Initial:
                            	//
                            	//	Ex: F_SACM_DVR_Initial:
                            	//			...
                            	//			call F_SP_SACM_DVR_Init_
                            	//			call F_SP_Play_Mode0/1/2/3	->0,1,2,3 depending on the para1
                            	//			...
                            	//			retf
                            	//	Ex1:
                            	//		F_SACM_DVR_Record: (or F_SACM_DVR_InitEncoder)
                            	//			...
                            	//			call F_SP_SACM_DVR_Rec_Init
                            	//			...
                            	//			retf
                            	//	Ex2:
                            	//		F_SACM_DVR_Play: (or F_SACM_DVR_InitDecoder)
                            	//			...
                            	//			call F_SP_SACM_DVR_Play_Init_
                            	//			...
                            	//			retf
                            	///////////////////////////////////////////////////////////////////////////////
                            	F_SP_SACM_DVR_Init_:
0000CA30 40 92              	        r1 = 0x0000;                    // 24MHz, Fcpu=Fosc
0000CA31 19 D3 13 70        	        [P_SystemClock] = r1;           //  Frequency 20MHz
0000CA33 70 92              	        r1 = 0x0030;                    // TimerA CKA=Fosc/2 CKB=1 Tout:off
0000CA34 19 D3 0B 70        	        [P_TimerA_Ctrl] = r1;
0000CA36 09 93 00 FA        	        r1 = 0xfa00;                    // 8K @ 24.576MHz
                            	        //r1 = 0xfb1d;                  // 8K @ 20MHz
0000CA38 19 D3 0A 70        	        [P_TimerA_Data] = r1;
0000CA3A 75 92              	        r1 = 0x0035;                    // ADINI should be open (107)
0000CA3B 19 D3 15 70        	        [P_ADC_Ctrl] = r1;
0000CA3D 09 93 A8 00        	        r1 = 0x00A8;                    // Set the DA Ctrl
0000CA3F 19 D3 2A 70        	        [P_DAC_Ctrl] = r1;
                            	        
0000CA41 09 93 FF FF        	        r1 = 0xffff;
0000CA43 19 D3 11 70        	        [P_INT_Clear] = r1;          	// Clear interrupt occuiped events
                            	        
0000CA45 11 93 7E 04        	        R1 = [R_InterruptStatus]		//
0000CA47 09 A3 00 20        	        R1 |= C_FIQ_TMA					// Enable Timer A FIQ
0000CA49 19 D3 7E 04        	        [R_InterruptStatus] = R1		//
0000CA4B 19 D3 10 70        	        [P_INT_Ctrl] = R1				//
                            	        
0000CA4D 90 9A              	        RETF
                            	
                            	
                            	
                            	
                            	
                            	F_SP_SACM_DVR_Rec_Init_:					// call by SACM_DVR_Record / SACM_DVR_InitEncoder
0000CA4E 75 92              			r1 = 0x0035;  					//mic input
                            	        //r1 = 0x0037					//line_in input
0000CA4F 19 D3 15 70        	        [P_ADC_Ctrl] = r1;       		//enable ADC
                            	        
0000CA51 09 93 00 FE        	        R1=0xfe00;                     	//24K @ 24.576MHz
0000CA53 19 D3 0A 70        	        [P_TimerA_Data] = r1 
0000CA55 90 9A              			RETF
                            	
                            	F_SP_SACM_DVR_Play_Init_:
0000CA56 40 92              		    r1 = 0x0000						// call by SACM_DVR_Stop / SACM_DVR_Play
0000CA57 19 D3 15 70        	        [P_ADC_Ctrl] = r1;       		// Disable ADC
                            	        
0000CA59 09 93 00 FD        	        r1 = 0xfd00;                	// 16K @ 24.576MHz
0000CA5B 19 D3 0A 70        	        [P_TimerA_Data] = r1;
0000CA5D 90 9A              	        RETF
                            	
                            	
                            	
                            	
                            	/////////////////////////////////////////////////////////////////////////////// 
                            	// Function: Extra Functions provided by Sunplus
                            	//	Type:	
                            	//		1. DAC Ramp up/down
                            	//		2. IO config/import/export
                            	//		3. Get resource data
                            	//
                            	//
                            	///////////////////////////////////////////////////////////////////////////////
                            	
                            	////////////////////////////////////////////////////////
                            	// Function: Ramp Up/Down to avoid speaker "pow" noise
                            	// Destory: R1,R2
                            	////////////////////////////////////////////////////////
                            	_SP_RampUpDAC1:	.PROC
                            	F_SP_RampUpDAC1:
0000CA5E 90 D4              			push r1,r2 to [sp] 
0000CA5F 11 93 17 70        	        r1=[P_DAC1] 
0000CA61 09 B3 C0 FF        	        r1 &= ~0x003f 
0000CA63 09 43 00 80        	        cmp     r1,0x8000
0000CA65 0E 0E              	        jb     	L_RU_NormalUp
0000CA66 19 5E              	        je      L_RU_End
                            	                
                            	L_RU_DownLoop:
0000CA67 40 F0 CA CA        	        call    F_Delay         
0000CA69 41 94              	        r2 = 0x0001 
0000CA6A 1A D5 12 70        	        [P_Watchdog_Clear] = r2 
0000CA6C 09 23 40 00        	        r1 -= 0x40 
0000CA6E 19 D3 17 70        	        [P_DAC1] = r1 
0000CA70 09 43 00 80        	        cmp     r1,0x8000 
0000CA72 4C 4E              	        jne     L_RU_DownLoop   
                            	L_RD_DownEnd:
0000CA73 0C EE              	        jmp     L_RU_End 
                            	
                            	L_RU_NormalUp:
                            	L_RU_Loop:
0000CA74 40 F0 CA CA        	        call    F_Delay 
0000CA76 41 94              	        r2 = 0x0001 
0000CA77 1A D5 12 70        	        [P_Watchdog_Clear] = r2 
0000CA79 09 03 40 00        	        r1 += 0x40 
0000CA7B 19 D3 17 70        	        [P_DAC1] = r1 
0000CA7D 09 43 00 80        	        cmp     r1, 0x8000 
0000CA7F 4C 4E              	        jne     L_RU_Loop 
                            	L_RU_End:
0000CA80 90 90              			pop     r1,r2 from [sp] 
0000CA81 90 9A              	  		retf 
                            	    	.ENDP
                            	    
                            	//............................................................
                            	_SP_RampDnDAC1:	.PROC
                            	F_SP_RampDnDAC1:
0000CA82 90 D4              			push r1,r2 to [sp] 
                            	  		//int off 
0000CA83 11 93 17 70        	    	r1 = [P_DAC1] 
0000CA85 09 B3 C0 FF        	     	r1 &= ~0x003F 
0000CA87 0A 5E              	      	jz      L_RD_End 
                            	L_RD_Loop:                
0000CA88 40 F0 CA CA        	        call    F_Delay         
0000CA8A 41 94              	        r2 = 0x0001 
0000CA8B 1A D5 12 70        	        [P_Watchdog_Clear] = r2 
0000CA8D 09 23 40 00        	        r1 -= 0x40 
0000CA8F 19 D3 17 70        	        [P_DAC1] = r1   
0000CA91 4A 4E              	        jnz     L_RD_Loop 
                            	L_RD_End:       
                            			//int	fiq,irq
0000CA92 90 90              	        pop     r1,r2 from [sp] 
0000CA93 90 9A              	        retf 
                            			.ENDP
                            	
                            	//..............................................................
                            	_SP_RampUpDAC2:	.PROC
                            	F_SP_RampUpDAC2:
0000CA94 90 D4              			push r1,r2 to [sp] 
0000CA95 11 93 16 70        	  		r1=[P_DAC2] 
0000CA97 09 B3 C0 FF        	    	r1 &= ~0x003f 
0000CA99 09 43 00 80        	     	cmp     r1,0x8000
0000CA9B 0E 0E              	      	jb     	L_RU_NormalUp_   
0000CA9C 5D 5E              	       	je      L_RU_End 
                            	                
                            	L_RU_DownLoop_:
0000CA9D 40 F0 CA CA        	        call    F_Delay         
0000CA9F 41 94              	        r2 = 0x0001 
0000CAA0 1A D5 12 70        	        [P_Watchdog_Clear] = r2 
0000CAA2 09 23 40 00        	        r1 -= 0x40 
0000CAA4 19 D3 16 70        	        [P_DAC2] = r1 
0000CAA6 09 43 00 80        	        cmp     r1,0x8000 
0000CAA8 4C 4E              	        jne     L_RU_DownLoop_   
                            	L_RD_DownEnd_:
0000CAA9 0C EE              	        jmp     L_RU_End_ 
                            	
                            	L_RU_NormalUp_:
                            	L_RU_Loop_:
0000CAAA 40 F0 CA CA        			call    F_Delay 
0000CAAC 41 94              	  		r2 = 0x0001 
0000CAAD 1A D5 12 70        	    	[P_Watchdog_Clear] = r2 
0000CAAF 09 03 40 00        	        r1 += 0x40 
0000CAB1 19 D3 16 70        	        [P_DAC2] = r1 
0000CAB3 09 43 00 80        	        cmp     r1, 0x8000 
0000CAB5 4C 4E              	        jne     L_RU_Loop_ 
                            	L_RU_End_:
0000CAB6 90 90              	   		pop     r1,r2 from [sp] 
0000CAB7 90 9A              	     	retf 
                            	      	.ENDP
                            	//.............................................................
                            	_SP_RampDnDAC2:	.PROC
                            	F_SP_RampDnDAC2:
                            			//int off 
0000CAB8 90 D4              			push r1,r2 to [sp] 
                            	                
0000CAB9 11 93 16 70        	        r1 = [P_DAC2] 
0000CABB 09 B3 C0 FF        	        r1 &= ~0x003F 
0000CABD 0A 5E              	        jz      L_RD_End_ 
                            	L_RD_Loop_:                
0000CABE 40 F0 CA CA        	        call    F_Delay         
0000CAC0 41 94              	        r2 = 0x0001 
0000CAC1 1A D5 12 70        	        [P_Watchdog_Clear] = r2 
0000CAC3 09 23 40 00        	        r1 -= 0x40 
0000CAC5 19 D3 16 70        	        [P_DAC2] = r1   
0000CAC7 4A 4E              	        jnz     L_RD_Loop_ 
                            	L_RD_End_:       
0000CAC8 90 90              	        pop     r1,r2 from [sp] 
0000CAC9 90 9A              	        retf 
                            			.ENDP
                            	
                            	//..................................................................				
                            	F_Delay:
0000CACA 88 D2              	        push r1 to [sp] 
0000CACB 50 92              	        r1 = C_RampDelayTime			// Ramp Up/Dn delay per step
                            	L_D_Loop:
0000CACC 41 22              	        r1 -= 1 
0000CACD 42 4E              	        jnz     L_D_Loop  
0000CACE 88 90              	        pop     r1 from [sp] 
0000CACF 90 9A              	        RETF	 
                            	
                            	
                            	
                            	////////////////////////////////////////////////////////////////
                            	// Function: I/O Port A configuration
                            	// 	void SP_Inti_IOA(int Dir, int Data, int Attrib)
                            	////////////////////////////////////////////////////////////////
                            	_SP_Init_IOA: .PROC
0000CAD0 88 DA              			PUSH BP TO [SP] 
0000CAD1 08 0B 01 00        	        BP = SP + 1 
0000CAD3 88 D2              			PUSH R1 TO [SP] 
0000CAD4 03 92              			R1 = [BP+3] 						// Port direction
0000CAD5 19 D3 02 70        			[P_IOA_Dir] = R1 
0000CAD7 04 92              			R1 = [BP+4] 
0000CAD8 19 D3 00 70        			[P_IOA_Data] = R1 
0000CADA 05 92              			R1 = [BP+5] 
0000CADB 19 D3 03 70        			[P_IOA_Attrib] = R1 
                            			
0000CADD 88 90              			POP R1 FROM [SP] 
0000CADE 88 98              	        POP BP FROM [SP] 
0000CADF 90 9A              	        RETF 
                            			.ENDP
                            	
                            	////////////////////////////////////////////////////////////////// 
                            	// Function: I/O Port B configuration
                            	//  void SP_Inti_IOB(int Dir, int Data, int Attrib)
                            	//////////////////////////////////////////////////////////////////    
                            	_SP_Init_IOB: .PROC
0000CAE0 88 DA              			PUSH BP TO [SP] 
0000CAE1 08 0B 01 00        	        BP = SP + 1 
0000CAE3 88 D2              			PUSH R1 TO [SP] 
0000CAE4 03 92              			R1 = [BP+3] 						// Port direction
0000CAE5 19 D3 07 70        			[P_IOB_Dir] = R1 
0000CAE7 04 92              			R1 = [BP+4] 
0000CAE8 19 D3 05 70        			[P_IOB_Data] = R1 
0000CAEA 05 92              			R1 = [BP+5] 
0000CAEB 19 D3 08 70        			[P_IOB_Attrib] = R1 
                            			
0000CAED 88 90              			POP R1 FROM [SP] 
0000CAEE 88 98              	        POP BP FROM [SP] 
0000CAEF 90 9A              	        RETF 
                            			.ENDP
                            	
                            	////////////////////////////////////////////////////////////////// 
                            	// Function: Get data from port
                            	// 	int SP_Import(unsigned int Port)
                            	//////////////////////////////////////////////////////////////////  
                            	_SP_Import: .PROC
0000CAF0 88 DA              	        PUSH BP TO [SP] 
0000CAF1 08 0B 01 00        	        BP = SP + 1 
                            	        
0000CAF3 03 92              			R1 = [BP+3]  						// Port Number
0000CAF4 C1 92              			R1 = [R1]  
                            					
0000CAF5 88 98              	        POP BP FROM [SP] 
0000CAF6 90 9A              	        RETF 
                            			.ENDP
                            	
                            	_SP_Export: .PROC
0000CAF7 88 DA              	        PUSH BP,BP TO [SP] 
0000CAF8 08 0B 01 00        	        BP = SP + 1 
0000CAFA 90 D4              			PUSH R1,R2 TO [SP] 
0000CAFB 03 92              			R1 = [BP+3]  						// Port Number
0000CAFC 04 94              			R2 = [BP+4]  						// Value
0000CAFD C1 D4              			[R1] = R2  
0000CAFE 90 90              			POP R1,R2 FROM [SP] 
0000CAFF 88 98              	        POP BP,BP FROM [SP] 
0000CB00 90 9A              	        RETF         
                            	 		.ENDP
                            	
                            	
                            	////////////////////////////////////////////////////////////////// 
                            	// Function: Get data from resource(ROM area)
                            	// 	int SP_GetResource(int Addr, int Page)
                            	//////////////////////////////////////////////////////////////////  
                            	_SP_GetResource:	.PROC
0000CB01 88 DA              			push bp to [sp] 
0000CB02 08 0B 01 00        			bp = sp + 1 
                            			
0000CB04 03 92              			r1 = [bp+3] 					// Address
0000CB05 04 94              			r2 = [bp+4] 					// Page
                            			
0000CB06 5A 95              			r2 = r2 lsl 4 					// Prepare Page for SR
0000CB07 5A 95              			r2 = r2 lsl 4 
0000CB08 4A 95              			r2 = r2 lsl 2 
                            			
0000CB09 7F BC              			sr &= 0x03f 					// Change Page
0000CB0A 06 A5              	        r2 |=sr 						//
0000CB0B 02 9D              	        sr = r2 						//
                            	  
0000CB0C E1 92              	  		r1 = D:[r1] 					// Get data
                            	       
0000CB0D 88 98              			pop	 bp from [sp] 
0000CB0E 90 9A              			retf 
                            			.ENDP 
                            	//........................................
                            	F_SP_GetResource:
0000CB0F 5A 95              			r2 = r2 lsl 4 					// Prepare Page for SR
0000CB10 5A 95              			r2 = r2 lsl 4 
0000CB11 4A 95              			r2 = r2 lsl 2 
                            			
0000CB12 7F BC              			sr &= 0x03f 					// Change Page
0000CB13 06 A5              	        r2 |=sr 						//
0000CB14 02 9D              	        sr = r2 						//
                            	  
0000CB15 E1 92              	  		r1 = D:[r1] 					// Get data
0000CB16 90 9A              		  	retf
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Functions: Reserve old defintion
                            	// Note: 	1. Some user who use old library may use the old name
                            	//			2. Have to be put at the end of this file
                            	//////////////////////////////////////////////////////////////////
                            	.DEFINE F_RampUpDAC1 F_SP_RampUpDAC1
                            	.DEFINE F_RampDnDAC1 F_SP_RampDnDAC1
                            	.DEFINE F_RampUpDAC2 F_SP_RampUpDAC2
                            	.DEFINE F_RampDnDAC2 F_SP_RampDnDAC2
                            	.DEFINE _STD_RampUpDAC1 _SP_RampUpDAC1
                            	.DEFINE _STD_RampDnDAC1 _SP_RampDnDAC1
                            	.DEFINE _STD_RampUpDAC2 _SP_RampUpDAC2
                            	.DEFINE _STD_RampDnDAC2 _SP_RampDnDAC2
                            	
                            	
                            	///////////////////////////////////////////////////////////////////
                            	                
                            	//========================================================================================        
                            	// End of hardware.asm
                            	//========================================================================================
                            	
                            	
                            	
                            	        
                            	        
                            	        
0 error(s), 0 warning(s).


























































